Ao trabalhar com async function, eu n√£o tenho que esperar at√© que todos os dados sejam carregados, para finaliz√°-la. Para isso eu tenho que "esperar"(await) por uma "promessa"(Promisse)

console.table() ir√° gerar uma tabela de dados no console.

{...}: essas retic√™ncias s√£o conhecidas como spread operator. Ele faz uma c√≥pia de todo o array que esteja sendo trabalhado


M√©todos √∫teis para se utilizar com arrays:

.concat(): junta dois ou mais elementos em um novo array, sem alterar os j√° existentes

.pop(): remove o √∫ltimo elemento de um array

.push(): adiciona um novo elemento no final do array, aumentando seu tamanho

.includes(): verifica se um elemento est√° contido em um array e retorna true caso esteja e false, caso n√£o

.fill(): preenche os elementos especificados em um array com um determinado valor

.indexOf(): retorna o primeiro √≠ndice encontrado de um valor especificado. Se o valor n√£o for encontrado o m√©todo retorna -1

.reverse(): inverte a ordem dos elementos de um array e substitui o array original

.slice(): retorna elementos de um array, selecionados de determinada posi√ß√£o de in√≠cio at√© determinada posi√ß√£o final. O elemento na posi√ß√£o final n√£o √© incluso.

.some(): verifica se algum elemento do array passa em um teste. Esse teste √© feito atrav√©s de uma fun√ß√£o callback. O m√©todo executa a fun√ß√£o de callback para cada elemento uma vez e retorna true se o teste for true para um dos elementos, e false se o teste for false para todos os elementos. Al√©m disso, o m√©todo n√£o executa a fun√ß√£o callback para arrays vazios e n√£o altera o array.

.join(): puxa elementos de um array e lista no formato de string, o resultado da opera√ß√£o puxou as propriedades do array e as listou de acordo com o que foi determinado.

.shift(): parecido com o m√©todo .pop() mas ao inv√©s de remover o √∫ltimo elemento do array, ele √© usado para remover o primeiro elemento do array.

.unshift(): parecido com o que m√©todo .push() realiza, mas ao inv√©s de adicionar no final do array, ele √© utilizado para adicionar um elemento no in√≠cio de um array.

.splice(): conseguimos escolher um √≠ndice inicial e final para substituirmos valores no lugar deles. E tamb√©m podemos remover itens.

.length(): define ou retorna o n√∫mero de elementos em um array.

.sort(): ordena os elementos do pr√≥prio array e retorna o array. A ordena√ß√£o padr√£o √© de acordo com a pontua√ß√£o de c√≥digo unicode.

.toString(): retorna uma string com todos os valores do array separados por v√≠rgulas.

.findIndex(): retorna o √≠ndice no array do primeiro elemento que satisfizer a fun√ß√£o de teste provida. Caso contr√°rio, retorna -1, indicando que nenhum elemento passou no teste.

.find(): √© utilizado para procurar um elemento dentro do array que atenda a condi√ß√£o atribu√≠da a ele, que retornar√° o primeiro elemento encontrado. Ele percorre todo o array buscando o elemento que atenda a condi√ß√£o e retorna o primeiro que foi encontrado, caso n√£o encontre retorna undefined. Este m√©todo n√£o executa caso o array esteja vazio e n√£o altera o array original

.at(): acessa os elementos de um array usando um √≠ndice inteiro positivo e negativo, sendo que o √≠ndice negativo enumera os itens de tr√°s para frente, portando o üèê est√° posicionado no √≠ndice -1.

.isArray(): verifica se a vari√°vel √© um array e retorna true ou false.

.every(): verifica se cada elemento do array passa em um teste. Esse teste √© feito atrav√©s de uma fun√ß√£o callback. O m√©todo executa a fun√ß√£o de callback para cada elemento uma vez e retorna true se o teste for true para todos os elementos, e false se o teste for false para pelo menos um elemento. Al√©m disso, o m√©todo n√£o executa a fun√ß√£o callback para arrays vazios e n√£o altera o array.

.filter(): usa uma fun√ß√£o callback de teste e executa ela para cada elemento do array. Ele retorna um novo array com os elementos que passarem no teste.

.map(): usa uma fun√ß√£o callback de teste e executa ela para cada elemento do array, retornando um novo array modificado. N√£o executa a fun√ß√£o de callback para arrays vazios.

.forEach(): usa uma fun√ß√£o callback e executa ela para cada elemento do array. N√£o executa a fun√ß√£o de callback para arrays vazios e n√£o retorna um novo array, diferente do m√©todo map.

.copyWithin(): copia os elementos do array para outra posi√ß√£o no array, ele n√£o adiciona itens apenas substitui os valores existentes.

.lastIndexOf(): retorna o valor do √∫ltimo √≠ndice especificado, se o valor n√£o for encontrado ele retorna -1.

.valueOf(): √© usado para retornar o array. √â um m√©todo padr√£o do objeto Array. Este m√©todo retorna todos os itens na mesma matriz. Ele n√£o altera o conte√∫do original da matriz e n√£o cont√©m nenhum valor de par√¢metro.

.reduce(): executa uma fun√ß√£o redutora para o elemento array, ele retorna um √∫nico valor que √© o resultado acumulado da fun√ß√£o. Ele n√£o executa a fun√ß√£o para elementos de array vazios e n√£o altera a matriz original.

.keys(): retorna um novo array composto pelas chaves (posi√ß√µes) do array o qual ele foi aplicado.





























